{
  "name": "input-08",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Check, Copy } from \"lucide-react\";\nimport { useCopyToClipboard } from \"@/hooks/use-copy-to-clipboard\";\n\ninterface ColorInputProps {\n    onChange?: (color: string) => void;\n    defaultValue?: string;\n    swatches?: string[];\n    showOpacity?: boolean;\n    label?: string;\n}\n\nconst defaultSwatches = [\n    \"#ef4444\",\n    \"#f97316\",\n    \"#f59e0b\",\n    \"#84cc16\",\n    \"#22c55e\",\n    \"#06b6d4\",\n    \"#3b82f6\",\n    \"#6366f1\",\n    \"#8b5cf6\",\n    \"#d946ef\",\n    \"#ec4899\",\n    \"#f43f5e\",\n];\n\nexport default function Input_08({\n    onChange,\n    defaultValue = \"#3b82f6\",\n    swatches = defaultSwatches,\n    showOpacity = true,\n    label = \"Color\",\n}: ColorInputProps) {\n    const [color, setColor] = useState(defaultValue);\n    const [opacity, setOpacity] = useState(100);\n    const pickerRef = useRef<HTMLDivElement>(null);\n    const { isCopied, copyToClipboard } = useCopyToClipboard();\n\n    const handleColorChange = (newColor: string) => {\n        setColor(newColor);\n        const finalColor =\n            opacity === 100\n                ? newColor\n                : `${newColor}${Math.round(opacity * 2.55)\n                      .toString(16)\n                      .padStart(2, \"0\")}`;\n        onChange?.(finalColor);\n    };\n\n    const handleOpacityChange = (value: number) => {\n        setOpacity(value);\n        const finalColor = `${color}${Math.round(value * 2.55)\n            .toString(16)\n            .padStart(2, \"0\")}`;\n        onChange?.(finalColor);\n    };\n\n    const handleCopy = () => {\n        const finalColor =\n            opacity === 100\n                ? color\n                : `${color}${Math.round(opacity * 2.55)\n                      .toString(16)\n                      .padStart(2, \"0\")}`;\n        copyToClipboard(finalColor);\n    };\n\n    return (\n        <div className=\"w-full max-w-xs space-y-2 relative z-10 min-h-[200px]\">\n            {label && (\n                <label\n                    htmlFor=\"color-input\"\n                    className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\n                >\n                    {label}\n                </label>\n            )}\n\n            <div className=\"relative\" ref={pickerRef}>\n                <div\n                    className={cn(\n                        \"p-3\",\n                        \"bg-white dark:bg-zinc-900\",\n                        \"border border-zinc-200 dark:border-zinc-800\",\n                        \"rounded-lg\"\n                    )}\n                >\n                    {/* Custom Color Input */}\n                    <div className=\"flex gap-2\">\n                        <div\n                            className=\"w-8 h-8 rounded-md border border-zinc-200 dark:border-zinc-700\"\n                            style={{ backgroundColor: color }}\n                        />\n                        <div className=\"flex-1 flex items-center\">\n                            <input\n                                id=\"color-input\"\n                                type=\"text\"\n                                value={color.toUpperCase()}\n                                onChange={(e) => {\n                                    const value = e.target.value;\n                                    if (/^#[0-9A-F]{0,6}$/i.test(value)) {\n                                        handleColorChange(value);\n                                    }\n                                }}\n                                className={cn(\n                                    \"flex-1 px-2 py-1\",\n                                    \"rounded-md border border-zinc-200 dark:border-zinc-800\",\n                                    \"bg-white dark:bg-zinc-900\",\n                                    \"text-sm font-mono\",\n                                    \"focus:outline-none focus:ring-2 focus:ring-indigo-500/20\"\n                                )}\n                            />\n                            <button\n                                type=\"button\"\n                                onClick={handleCopy}\n                                className=\"ml-2 hover:opacity-70\"\n                            >\n                                {isCopied ? (\n                                    <Check className=\"w-4 h-4 text-green-500\" />\n                                ) : (\n                                    <Copy className=\"w-4 h-4 text-zinc-500\" />\n                                )}\n                            </button>\n                        </div>\n                    </div>\n\n                    {/* Opacity Slider */}\n                    {showOpacity && (\n                        <div className=\"space-y-1.5\">\n                            <div className=\"flex justify-between text-xs\">\n                                <span>Opacity</span>\n                                <span>{opacity}%</span>\n                            </div>\n                            <input\n                                type=\"range\"\n                                min=\"0\"\n                                max=\"100\"\n                                value={opacity}\n                                onChange={(e) =>\n                                    handleOpacityChange(Number(e.target.value))\n                                }\n                                className={cn(\n                                    \"w-full h-2 rounded-full appearance-none\",\n                                    \"bg-gradient-to-r from-transparent to-current\",\n                                    \"cursor-pointer\"\n                                )}\n                                style={{ color: color }}\n                            />\n                        </div>\n                    )}\n\n                    <div className=\"space-y-1.5\">\n                        <div className=\"text-xs font-medium text-zinc-600 dark:text-zinc-400\">\n                            Swatches\n                        </div>\n                        <div className=\"grid grid-cols-6 gap-1\">\n                            {swatches.map((swatch) => (\n                                <button\n                                    type=\"button\"\n                                    key={swatch}\n                                    onClick={() => handleColorChange(swatch)}\n                                    className={cn(\n                                        \"w-6 h-6 rounded-md\",\n                                        \"border border-zinc-200 dark:border-zinc-700\",\n                                        \"transition-transform hover:scale-110\",\n                                        \"relative\"\n                                    )}\n                                    style={{ backgroundColor: swatch }}\n                                >\n                                    {color === swatch && (\n                                        <Check\n                                            className={cn(\n                                                \"w-4 h-4 absolute inset-0 m-auto\",\n                                                \"text-white drop-shadow-[0_1px_1px_rgba(0,0,0,0.5)]\"\n                                            )}\n                                        />\n                                    )}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
      "path": "/components/kokonutui/input/input-08.tsx",
      "target": "/components/kokonutui/input-08.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import * as React from \"react\";\n\nexport function useCopyToClipboard({\n    timeout = 2000,\n    onCopy,\n}: {\n    timeout?: number;\n    onCopy?: () => void;\n} = {}) {\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    const copyToClipboard = (value: string) => {\n        if (typeof window === \"undefined\" || !navigator.clipboard.writeText) {\n            return;\n        }\n\n        if (!value) return;\n\n        navigator.clipboard.writeText(value).then(() => {\n            setIsCopied(true);\n\n            if (onCopy) {\n                onCopy();\n            }\n\n            setTimeout(() => {\n                setIsCopied(false);\n            }, timeout);\n        }, console.error);\n    };\n\n    return { isCopied, copyToClipboard };\n}\n",
      "path": "/hooks/use-copy-to-clipboard.ts",
      "target": "/components/kokonutui/use-copy-to-clipboard.ts"
    }
  ]
}